/**
 * 
 * Defines an interface to re-compute fields inside relationships.
 * 
 * Examples:
 * /updateLink
 * /updateAllDeep
 * /updateFieldsRelationships
 * 
 */
const {
	API : {
		BadRequest
	}
} = require("../core/errors")

const relationShipsController = {
    /**
     * Re-compute computed fields on 2 records connected by a link.
     * 
     * Note: this is used when linking / unlinking records together.
     */
    async updateLink(req, res) {
        const token = req.token
        const link = req.body
        const operations = await kiss.data.relations.updateLink(link, token.userId)
        
        res.status(200).send({success: true})

		// Broadcast the operations to the user who triggered the update
        if (operations.length == 0) return

		kiss.websocket.publish(token.currentAccountId, "*+", {
			channel: "EVT_DB_UPDATE_BULK",
			accountId: token.accountId,
			userId: token.userId,
			data: operations
		})        
    },

    /**
     * Re-compute computed fields on all records of a collection.
     * 
     * Note: this is used when changing a computed field formula.
     */
    async updateAllDeep(req, res) {
        const token = req.token
        const modelId = req.body.modelId
        const operations = await kiss.data.relations.updateAllDeep(modelId)

        res.status(200).send({success: true})

        // Broadcast the operations to the user who triggered the update
        if (operations.length == 0) return
        
        kiss.websocket.publish(token.currentAccountId, "*+", {
            channel: "EVT_DB_UPDATE_BULK",
            accountId: token.accountId,
            userId: token.userId,
            data: operations
        })	        
    },

    /**
     * Update the relationships generated by computed fields like <lookup> and <summary> fields
     * 
     * Note: this is used when importing an application from JSON.
     * This generally generates multiple models which relationships need to be discovered and cached immediately.
     */
    async updateFieldsRelationships(req, res) {
        const token = req.token
        const modelIds = req.body

        if (!Array.isArray(modelIds)) throw new BadRequest()

        for (modelId of modelIds) {
            if (kiss.tools.hasAccessToCustomModel(token, modelId)) {
                kiss.data.relations.update(modelId)
            }
        }

        res.status(200).send({success: true})
    }
}

module.exports = relationShipsController